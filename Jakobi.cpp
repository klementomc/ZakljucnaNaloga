#include <iostream>
#include <Eigen/Dense>
#include <Eigen/QR>
#include <Eigen/Core>
#include <math.h>
#include <vector>
#include <list>
#include <Eigen/Geometry>
#include <Eigen/SVD>
#include <time.h>
#include <map>

using namespace std;
template <typename _Matrix_Type_>
_Matrix_Type_ pseudoInverse(const _Matrix_Type_ &a, double epsilon = std::numeric_limits<double>::epsilon())
{
    Eigen::JacobiSVD<_Matrix_Type_> svd(a, Eigen::ComputeThinU | Eigen::ComputeThinV);
    double tolerance = epsilon * std::max(a.cols(), a.rows()) * svd.singularValues().array().abs()(0);
    return svd.matrixV() * (svd.singularValues().array().abs() > tolerance).select(svd.singularValues().array().inverse(), 0).matrix().asDiagonal() * svd.matrixU().adjoint();
}

Eigen::MatrixXd Jakobi(double theta1, double theta2, double theta3, double theta4, double theta5, double theta6, double theta7)
{

    Eigen::MatrixXd J(6, 7);

    J << 87999999999997 * (((-sin(theta1) * cos(theta2) * cos(theta3) - sin(theta3) * cos(theta1)) * cos(theta4) - sin(theta1) * sin(theta2) * sin(theta4)) * cos(theta5) - (-sin(theta1) * sin(theta3) * cos(theta2) + cos(theta1) * cos(theta3)) * sin(theta5)) * cos(theta6) / 999999999999966 + 87999999999997 * (-(-sin(theta1) * cos(theta2) * cos(theta3) - sin(theta3) * cos(theta1)) * sin(theta4) - sin(theta1) * sin(theta2) * cos(theta4)) * sin(theta6) / 999999999999966 - 383999999999957 * (-sin(theta1) * cos(theta2) * cos(theta3) - sin(theta3) * cos(theta1)) * sin(theta4) / 999999999999888 - 53078138465443 * (-sin(theta1) * cos(theta2) * cos(theta3) - sin(theta3) * cos(theta1)) * cos(theta4) / 643371375338703 + 53078138465443 * sin(theta1) * sin(theta2) * sin(theta4) / 643371375338703 - 383999999999957 * sin(theta1) * sin(theta2) * cos(theta4) / 999999999999888 - 315999999999994 * sin(theta1) * sin(theta2) / 999999999999981 - 53078138465443 * sin(theta1) * cos(theta2) * cos(theta3) / 643371375338703 - 53078138465443 * sin(theta3) * cos(theta1) / 643371375338703, 87999999999997 * ((-sin(theta2) * cos(theta1) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta1) * cos(theta2)) * cos(theta5) + sin(theta2) * sin(theta3) * sin(theta5) * cos(theta1)) * cos(theta6) / 999999999999966 + 87999999999997 * (sin(theta2) * sin(theta4) * cos(theta1) * cos(theta3) + cos(theta1) * cos(theta2) * cos(theta4)) * sin(theta6) / 999999999999966 + 383999999999957 * sin(theta2) * sin(theta4) * cos(theta1) * cos(theta3) / 999999999999888 + 53078138465443 * sin(theta2) * cos(theta1) * cos(theta3) * cos(theta4) / 643371375338703 - 53078138465443 * sin(theta2) * cos(theta1) * cos(theta3) / 643371375338703 - 53078138465443 * sin(theta4) * cos(theta1) * cos(theta2) / 643371375338703 + 383999999999957 * cos(theta1) * cos(theta2) * cos(theta4) / 999999999999888 + 315999999999994 * cos(theta1) * cos(theta2) / 999999999999981, 87999999999997 * (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta5) + (-sin(theta1) * cos(theta3) - sin(theta3) * cos(theta1) * cos(theta2)) * cos(theta4) * cos(theta5)) * cos(theta6) / 999999999999966 - 87999999999997 * (-sin(theta1) * cos(theta3) - sin(theta3) * cos(theta1) * cos(theta2)) * sin(theta4) * sin(theta6) / 999999999999966 - 383999999999957 * (-sin(theta1) * cos(theta3) - sin(theta3) * cos(theta1) * cos(theta2)) * sin(theta4) / 999999999999888 - 53078138465443 * (-sin(theta1) * cos(theta3) - sin(theta3) * cos(theta1) * cos(theta2)) * cos(theta4) / 643371375338703 - 53078138465443 * sin(theta1) * cos(theta3) / 643371375338703 - 53078138465443 * sin(theta3) * cos(theta1) * cos(theta2) / 643371375338703, 87999999999997 * (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) + sin(theta2) * cos(theta1) * cos(theta4)) * cos(theta5) * cos(theta6) / 999999999999966 + 87999999999997 * (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) - sin(theta2) * sin(theta4) * cos(theta1)) * sin(theta6) / 999999999999966 + 53078138465443 * (-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) / 643371375338703 - 383999999999957 * (-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) / 999999999999888 - 383999999999957 * sin(theta2) * sin(theta4) * cos(theta1) / 999999999999888 - 53078138465443 * sin(theta2) * cos(theta1) * cos(theta4) / 643371375338703, 87999999999997 * (-((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * sin(theta5) - (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * cos(theta5)) * cos(theta6) / 999999999999966, -87999999999997 * (((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * cos(theta5) - (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * sin(theta5)) * sin(theta6) / 999999999999966 + 87999999999997 * (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) + sin(theta2) * cos(theta1) * cos(theta4)) * cos(theta6) / 999999999999966, 0, 87999999999997 * (((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * cos(theta5) - (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * sin(theta5)) * cos(theta6) / 999999999999966 + 87999999999997 * (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) + sin(theta2) * cos(theta1) * cos(theta4)) * sin(theta6) / 999999999999966 - 383999999999957 * (-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) / 999999999999888 - 53078138465443 * (-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) / 643371375338703 - 53078138465443 * sin(theta1) * sin(theta3) / 643371375338703 - 53078138465443 * sin(theta2) * sin(theta4) * cos(theta1) / 643371375338703 + 383999999999957 * sin(theta2) * cos(theta1) * cos(theta4) / 999999999999888 + 315999999999994 * sin(theta2) * cos(theta1) / 999999999999981 + 53078138465443 * cos(theta1) * cos(theta2) * cos(theta3) / 643371375338703, 87999999999997 * ((-sin(theta1) * sin(theta2) * cos(theta3) * cos(theta4) + sin(theta1) * sin(theta4) * cos(theta2)) * cos(theta5) + sin(theta1) * sin(theta2) * sin(theta3) * sin(theta5)) * cos(theta6) / 999999999999966 + 87999999999997 * (sin(theta1) * sin(theta2) * sin(theta4) * cos(theta3) + sin(theta1) * cos(theta2) * cos(theta4)) * sin(theta6) / 999999999999966 + 383999999999957 * sin(theta1) * sin(theta2) * sin(theta4) * cos(theta3) / 999999999999888 + 53078138465443 * sin(theta1) * sin(theta2) * cos(theta3) * cos(theta4) / 643371375338703 - 53078138465443 * sin(theta1) * sin(theta2) * cos(theta3) / 643371375338703 - 53078138465443 * sin(theta1) * sin(theta4) * cos(theta2) / 643371375338703 + 383999999999957 * sin(theta1) * cos(theta2) * cos(theta4) / 999999999999888 + 315999999999994 * sin(theta1) * cos(theta2) / 999999999999981, 87999999999997 * ((-sin(theta1) * sin(theta3) * cos(theta2) + cos(theta1) * cos(theta3)) * cos(theta4) * cos(theta5) - (sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta5)) * cos(theta6) / 999999999999966 - 87999999999997 * (-sin(theta1) * sin(theta3) * cos(theta2) + cos(theta1) * cos(theta3)) * sin(theta4) * sin(theta6) / 999999999999966 - 383999999999957 * (-sin(theta1) * sin(theta3) * cos(theta2) + cos(theta1) * cos(theta3)) * sin(theta4) / 999999999999888 - 53078138465443 * (-sin(theta1) * sin(theta3) * cos(theta2) + cos(theta1) * cos(theta3)) * cos(theta4) / 643371375338703 - 53078138465443 * sin(theta1) * sin(theta3) * cos(theta2) / 643371375338703 + 53078138465443 * cos(theta1) * cos(theta3) / 643371375338703, 87999999999997 * (-(sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta4) + sin(theta1) * sin(theta2) * cos(theta4)) * cos(theta5) * cos(theta6) / 999999999999966 + 87999999999997 * (-(sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) - sin(theta1) * sin(theta2) * sin(theta4)) * sin(theta6) / 999999999999966 + 53078138465443 * (sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta4) / 643371375338703 - 383999999999957 * (sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) / 999999999999888 - 383999999999957 * sin(theta1) * sin(theta2) * sin(theta4) / 999999999999888 - 53078138465443 * sin(theta1) * sin(theta2) * cos(theta4) / 643371375338703, 87999999999997 * (-((sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) + sin(theta1) * sin(theta2) * sin(theta4)) * sin(theta5) - (sin(theta1) * sin(theta3) * cos(theta2) - cos(theta1) * cos(theta3)) * cos(theta5)) * cos(theta6) / 999999999999966, -87999999999997 * (((sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) + sin(theta1) * sin(theta2) * sin(theta4)) * cos(theta5) - (sin(theta1) * sin(theta3) * cos(theta2) - cos(theta1) * cos(theta3)) * sin(theta5)) * sin(theta6) / 999999999999966 + 87999999999997 * (-(sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta4) + sin(theta1) * sin(theta2) * cos(theta4)) * cos(theta6) / 999999999999966, 0, 0, 87999999999997 * ((-sin(theta2) * sin(theta4) - cos(theta2) * cos(theta3) * cos(theta4)) * cos(theta5) + sin(theta3) * sin(theta5) * cos(theta2)) * cos(theta6) / 999999999999966 + 87999999999997 * (-sin(theta2) * cos(theta4) + sin(theta4) * cos(theta2) * cos(theta3)) * sin(theta6) / 999999999999966 + 53078138465443 * sin(theta2) * sin(theta4) / 643371375338703 - 383999999999957 * sin(theta2) * cos(theta4) / 999999999999888 - 315999999999994 * sin(theta2) / 999999999999981 + 383999999999957 * sin(theta4) * cos(theta2) * cos(theta3) / 999999999999888 + 53078138465443 * cos(theta2) * cos(theta3) * cos(theta4) / 643371375338703 - 53078138465443 * cos(theta2) * cos(theta3) / 643371375338703, 87999999999997 * (sin(theta2) * sin(theta3) * cos(theta4) * cos(theta5) + sin(theta2) * sin(theta5) * cos(theta3)) * cos(theta6) / 999999999999966 - 87999999999997 * sin(theta2) * sin(theta3) * sin(theta4) * sin(theta6) / 999999999999966 - 383999999999957 * sin(theta2) * sin(theta3) * sin(theta4) / 999999999999888 - 53078138465443 * sin(theta2) * sin(theta3) * cos(theta4) / 643371375338703 + 53078138465443 * sin(theta2) * sin(theta3) / 643371375338703, 87999999999997 * (sin(theta2) * sin(theta4) * cos(theta3) + cos(theta2) * cos(theta4)) * cos(theta5) * cos(theta6) / 999999999999966 + 87999999999997 * (sin(theta2) * cos(theta3) * cos(theta4) - sin(theta4) * cos(theta2)) * sin(theta6) / 999999999999966 - 53078138465443 * sin(theta2) * sin(theta4) * cos(theta3) / 643371375338703 + 383999999999957 * sin(theta2) * cos(theta3) * cos(theta4) / 999999999999888 - 383999999999957 * sin(theta4) * cos(theta2) / 999999999999888 - 53078138465443 * cos(theta2) * cos(theta4) / 643371375338703, 87999999999997 * (-(-sin(theta2) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta2)) * sin(theta5) + sin(theta2) * sin(theta3) * cos(theta5)) * cos(theta6) / 999999999999966, -87999999999997 * ((-sin(theta2) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta2)) * cos(theta5) + sin(theta2) * sin(theta3) * sin(theta5)) * sin(theta6) / 999999999999966 + 87999999999997 * (sin(theta2) * sin(theta4) * cos(theta3) + cos(theta2) * cos(theta4)) * cos(theta6) / 999999999999966, 0, 0, -sin(theta2) * cos(theta1), -sin(theta1) * cos(theta3) - sin(theta3) * cos(theta1) * cos(theta2), -(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) + sin(theta2) * cos(theta1) * cos(theta4), -((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * sin(theta5) - (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * cos(theta5), -(((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * cos(theta5) - (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * sin(theta5)) * sin(theta6) + (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) + sin(theta2) * cos(theta1) * cos(theta4)) * cos(theta6), -((((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * cos(theta5) - (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * sin(theta5)) * cos(theta6) + (-(-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * sin(theta4) + sin(theta2) * cos(theta1) * cos(theta4)) * sin(theta6)) * sin(theta7) + (((-sin(theta1) * sin(theta3) + cos(theta1) * cos(theta2) * cos(theta3)) * cos(theta4) + sin(theta2) * sin(theta4) * cos(theta1)) * sin(theta5) + (sin(theta1) * cos(theta3) + sin(theta3) * cos(theta1) * cos(theta2)) * cos(theta5)) * cos(theta7), 0, -sin(theta1) * sin(theta2), -sin(theta1) * sin(theta3) * cos(theta2) + cos(theta1) * cos(theta3), -(sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta4) + sin(theta1) * sin(theta2) * cos(theta4), -((sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) + sin(theta1) * sin(theta2) * sin(theta4)) * sin(theta5) - (sin(theta1) * sin(theta3) * cos(theta2) - cos(theta1) * cos(theta3)) * cos(theta5), -(((sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) + sin(theta1) * sin(theta2) * sin(theta4)) * cos(theta5) - (sin(theta1) * sin(theta3) * cos(theta2) - cos(theta1) * cos(theta3)) * sin(theta5)) * sin(theta6) + (-(sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta4) + sin(theta1) * sin(theta2) * cos(theta4)) * cos(theta6), -((((sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) + sin(theta1) * sin(theta2) * sin(theta4)) * cos(theta5) - (sin(theta1) * sin(theta3) * cos(theta2) - cos(theta1) * cos(theta3)) * sin(theta5)) * cos(theta6) + (-(sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * sin(theta4) + sin(theta1) * sin(theta2) * cos(theta4)) * sin(theta6)) * sin(theta7) + (((sin(theta1) * cos(theta2) * cos(theta3) + sin(theta3) * cos(theta1)) * cos(theta4) + sin(theta1) * sin(theta2) * sin(theta4)) * sin(theta5) + (sin(theta1) * sin(theta3) * cos(theta2) - cos(theta1) * cos(theta3)) * cos(theta5)) * cos(theta7), 1, -cos(theta2), sin(theta2) * sin(theta3), sin(theta2) * sin(theta4) * cos(theta3) + cos(theta2) * cos(theta4), -(-sin(theta2) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta2)) * sin(theta5) + sin(theta2) * sin(theta3) * cos(theta5), -((-sin(theta2) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta2)) * cos(theta5) + sin(theta2) * sin(theta3) * sin(theta5)) * sin(theta6) + (sin(theta2) * sin(theta4) * cos(theta3) + cos(theta2) * cos(theta4)) * cos(theta6), -(((-sin(theta2) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta2)) * cos(theta5) + sin(theta2) * sin(theta3) * sin(theta5)) * cos(theta6) + (sin(theta2) * sin(theta4) * cos(theta3) + cos(theta2) * cos(theta4)) * sin(theta6)) * sin(theta7) + ((-sin(theta2) * cos(theta3) * cos(theta4) + sin(theta4) * cos(theta2)) * sin(theta5) - sin(theta2) * sin(theta3) * cos(theta5)) * cos(theta7);
    
    return J;
}

int main(){
    Eigen::VectorXd test (6);
    test << 2,3,4,45,6,7;
    cout << pseudoInverse(Jakobi(0,0,0,0,0,0,0))*test<< endl;
    cout << test;
}